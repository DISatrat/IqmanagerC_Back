package org.iqmanager.models;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;

/**
 * Имя поля	   |Обязательно |Допустимые значения	   |   Разрешенные специальные символы
 * Секунды	   |     ДА	    | 0-59	                   |   , - * /
 * Минуты	   |     ДА	    | 0-59	                   |   , - * /
 * Часы	       |     ДА	    | 0-23	                   |   , - * /
 * День месяца |	 ДА	    | 1-31	                   |   , - * ? / L W
 * Месяц	   |     ДА	    | 1-12 или ЯНВАРЬ-ДЕКАБРЬ  |   , - * /
 * День недели |	 ДА	    | 1-7 или ВС-СБ	           |   , - * ? / L #
 * Год	       |     НЕТ	| пустой, 1970-2099   	   |   , - * /
 *
 * Выражения cron могут быть такими же простыми, как это: * * * * ?
 * или более сложный, например: 0/5 14,18,3-39,52 * ? ЯНВАРЬ, МАРТ, СЕНТЯБРЬ ПН-ПТ 2002-2010
 *
 * `*` (“все значения”) - используется для выбора всех значений в поле. Например, “*” в поле minute означает “каждую минуту”.
 *
 * `?` (“no specific value”) - полезно, когда вам нужно указать что-то в одном из двух полей, в которых разрешен символ, но не в другом. Например, если я хочу, чтобы мой триггер срабатывал в определенный день месяца (скажем, 10-го), но мне все равно, какой это день недели, я бы поставил “10” в поле “ день месяца” и"? " в деньПоле недели. См.Примеры ниже для уточнения.
 *
 * `-` - используется для указания диапазонов. Например, “10-12” в поле hour означает “часы 10, 11 и 12”.
 *
 * `,` - используется для указания дополнительных значений. Например, “ПН,СР,ПТ” в поле “день недели”означает "дни понедельник, среда и пятница".
 *
 * `/` - используется для указания приращений. Например, “0/15” в поле секунды означает “секунды 0, 15, 30 и 45”. А “5/15” в поле секунды означает “секунды 5, 20, 35 и 50”. Вы также можете указать ‘ / "после" символа - в этом случае ‘ эквивалентно наличию “0”перед"/". " 1/3 "в поле" день месяца "означает" огонь каждые 3 дня, начиная с первого дня месяца".
 *
 * `L` (“последний”) - имеет разное значение в каждом из двух полей, в которых он разрешен. Например, значение “L” в поле “день месяца” означает "последний день месяца" -день 31 для января, день 28 для февраля в невисокосные годы. Если используется в поле “день недели” само по себе, это просто означает " 7 " или “SAT”. Но если используется в поле день недели после другого значения, это означает “последний xxx день месяца” - например, “6L” означает “последняя пятница месяца”. Вы также можете указать смещение от последнего дня месяца, например “L-3”, что будет означать предпоследний день календарного месяца. При использовании параметра " L " важно не указывать списки или диапазоны значений, так как вы получите запутанные/неожиданные результаты.
 *
 * `W` (“weekday”) - используется для указания ближайшего к данному дню дня недели (понедельник-пятница). Например, если вы укажете “15W” в качестве значения для поля “день месяца", это будет означать: "ближайший день недели к 15-му числу месяца”. Итак, если 15-е-суббота, триггер сработает в пятницу 14-го. Если 15-е воскресенье, триггер сработает в понедельник 16-го. Если 15-е-вторник, то он сработает во вторник 15-го. Однако, если вы укажете “1W” в качестве значения для дня месяца, а 1-й-суббота, триггер сработает в понедельник 3-го, так как он не будет "прыгать" через границу дней месяца. Символ ‘W’ может быть указан только в том случае, если день месяца является одним днем, а не диапазоном или списком дней.
 *
 * Символы 'L' и 'W' также можно объединить в поле день месяца, чтобы получить 'LW', что переводится как *"последний день недели месяца"*.
 * `#` - используется для указания “n-го” XXX дня месяца. Например, значение “6#3” в поле “день недели” означает “третья пятница месяца” (день 6 = пятница и "#3 " = 3-й в месяце). Другие примеры: “2#1” = первый понедельник месяца и “4#5 " = пятая среда месяца. Обратите внимание, что если вы укажете “#5” и в месяце не будет 5 данного дня недели, то в этом месяце стрельба не произойдет.
 *
 *
 * */


@Entity
@Table(name = "scheduler_job_info")
@Getter
@Setter
@NoArgsConstructor
public class SchedulerJobInfo {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private String id;

    @Column(name = "job_name")
    private String jobName;

    @Column(name = "job_group")
    private String jobGroup;

    @Column(name = "job_status")
    private String jobStatus;

    @Column(name = "job_class")
    private String jobClass;

    @Column(name = "cron_expression")
    private String cronExpression;

    @Column(name = "description")
    private String desc;

    @Column(name = "interface_name")
    private String interfaceName;

    @Column(name = "repeat_time")
    private Long repeatTime;

    @Column(name = "cron_job")
    private Boolean cronJob;


    public SchedulerJobInfo(String jobName, String jobGroup, String jobClass, String cronExpression) {
        this.jobName = jobName;
        this.jobGroup = jobGroup;
        this.jobClass = jobClass;
        this.cronExpression = cronExpression;
    }
}
